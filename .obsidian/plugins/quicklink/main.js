/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuickLinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  autocompleteTriggerPhrase: "@",
  isAutosuggestEnabled: true,
  excludeFolders: [],
  enableAdvancedUri: false,
  triggerFilterRules: [],
  mainPaths: [],
  advancedUriField: "uid"
};
async function generateMarkdownLink(app, file, alias, plugin) {
  let filePath = file.path.replace(/\.md$/, "");
  const fileName = file.basename;
  if (plugin.settings.enableAdvancedUri && app.plugins.plugins["obsidian-advanced-uri"]) {
    const vaultName = app.vault.getName();
    const fieldName = plugin.settings.advancedUriField;
    let uid = null;
    try {
      const content = await app.vault.read(file);
      const fmMatch = content.match(/^---\n([\s\S]*?)\n---/);
      if (fmMatch) {
        const uidMatch = fmMatch[1].match(new RegExp(`${fieldName}:\\s*([^\\s\\n]+)`));
        if (uidMatch) uid = uidMatch[1];
      }
      if (!uid) {
        const inline = content.match(new RegExp(`\\n${fieldName}:\\s*([^\\s\\n]+)`));
        if (inline) uid = inline[1];
      }
    } catch (e) {
    }
    let advancedUri;
    if (uid) {
      const param = encodeURIComponent(fieldName);
      advancedUri = `obsidian://advanced-uri?vault=${encodeURIComponent(vaultName)}&${param}=${encodeURIComponent(uid)}`;
    } else {
      advancedUri = `obsidian://advanced-uri?vault=${encodeURIComponent(vaultName)}&filepath=${encodeURIComponent(filePath)}`;
    }
    return alias ? `[${alias}](${advancedUri})` : `[${fileName}](${advancedUri})`;
  }
  const useMdLinks = app.vault.getConfig("useMarkdownLinks");
  if (useMdLinks) {
    const target = alias ? `[${alias}](${fileName})` : `[${fileName}](${fileName})`;
    return target;
  }
  return alias ? `[[${fileName}|${alias}]]` : `[[${fileName}]]`;
}
function escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Quick File Linker Settings / \u5FEB\u901F\u6587\u4EF6\u94FE\u63A5\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("Enable Suggestions / \u542F\u7528\u5EFA\u8BAE").setDesc(`Trigger on '${this.plugin.settings.autocompleteTriggerPhrase}' / \u4F7F\u7528 '${this.plugin.settings.autocompleteTriggerPhrase}' \u89E6\u53D1\u6587\u4EF6\u5EFA\u8BAE`).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.isAutosuggestEnabled).onChange(async (value) => {
        this.plugin.settings.isAutosuggestEnabled = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Trigger Character / \u89E6\u53D1\u5B57\u7B26").setDesc("Character that will trigger file suggestions / \u89E6\u53D1\u6587\u4EF6\u5EFA\u8BAE\u7684\u5B57\u7B26").addText(
      (text) => text.setValue(this.plugin.settings.autocompleteTriggerPhrase).onChange(async (value) => {
        this.plugin.settings.autocompleteTriggerPhrase = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("\u4E3B\u4F53\u6587\u4EF6\u5939 / Main Folders").setDesc(
      "\u8BBE\u7F6E\u8BE5\u6587\u4EF6\u5939\u7528\u4E8E\u81EA\u52A8\u626B\u63CF\u6587\u6863\u8FDB\u884C\u81EA\u52A8\u8FDE\u63A5\u521B\u5EFA\u3002\n\u4F7F\u7528\u5168\u5C40\u89E6\u53D1\u7B26\u65F6\uFF0C\u4EC5\u5728\u8FD9\u4E9B\u6587\u4EF6\u5939\u4E2D\u641C\u7D22\uFF08\u7559\u7A7A\u8868\u793A\u5168\u5C40\uFF09"
    ).addTextArea(
      (text) => {
        const input = text.inputEl;
        const wrapper = input.parentElement;
        wrapper.addClass("quicklink-wrapper");
        const suggestEl = wrapper.createDiv();
        suggestEl.addClass("quicklink-inline-suggestions");
        const updateSuggestions = async () => {
          const lines = input.value.split("\n").map((s) => s.trim()).filter(Boolean);
          this.plugin.settings.mainPaths = lines;
          await this.plugin.saveSettings();
          const cursorPos = input.selectionStart || 0;
          const before = input.value.substring(0, cursorPos);
          const parts = before.split("\n");
          const current = parts[parts.length - 1];
          let suggestions = [];
          const files = this.app.vault.getMarkdownFiles();
          if (!current.includes("/")) {
            const set = /* @__PURE__ */ new Set();
            files.forEach((f) => {
              const p = f.path.split("/")[0];
              if (f.path.includes("/")) set.add(p);
            });
            suggestions = Array.from(set);
          } else {
            const base = current.endsWith("/") ? current : current + "/";
            const set = /* @__PURE__ */ new Set();
            files.forEach((f) => {
              if (f.path.startsWith(base)) {
                const rem = f.path.substring(base.length);
                const slashIndex = rem.indexOf("/");
                if (slashIndex !== -1) {
                  const next = rem.substring(0, slashIndex);
                  set.add(base + next);
                }
              }
            });
            suggestions = Array.from(set);
          }
          const q = current.toLowerCase();
          suggestions = suggestions.filter((s) => s.toLowerCase().includes(q)).sort((a, b) => a.localeCompare(b)).slice(0, 50);
          while (suggestEl.firstChild) {
            suggestEl.removeChild(suggestEl.firstChild);
          }
          suggestions.forEach((sug) => {
            const item = suggestEl.createDiv({ cls: "quicklink-suggestion-item", text: sug });
            item.addEventListener("mousedown", async (e) => {
              e.preventDefault();
              const allLines = input.value.split("\n");
              allLines[parts.length - 1] = sug;
              input.value = allLines.join("\n");
              this.plugin.settings.mainPaths = allLines.filter((s) => s.trim());
              await this.plugin.saveSettings();
              while (suggestEl.firstChild) {
                suggestEl.removeChild(suggestEl.firstChild);
              }
            });
          });
        };
        input.addEventListener("input", updateSuggestions);
        input.addEventListener("focus", updateSuggestions);
        input.addEventListener("blur", () => {
          while (suggestEl.firstChild) {
            suggestEl.removeChild(suggestEl.firstChild);
          }
        });
      }
    );
    new import_obsidian.Setting(containerEl).setName("Exclude Folders / \u6392\u9664\u6587\u4EF6\u5939").setDesc("Folders to exclude from search (one per line) / \u6392\u9664\u641C\u7D22\u7684\u6587\u4EF6\u5939\uFF08\u6BCF\u884C\u4E00\u4E2A\uFF09").addTextArea((text) => {
      const input = text.inputEl;
      const wrapper = input.parentElement;
      wrapper.addClass("quicklink-wrapper");
      const suggestEl = wrapper.createDiv();
      suggestEl.addClass("quicklink-inline-suggestions");
      const updateSuggestions = async () => {
        const lines = input.value.split("\n").map((s) => s.trim()).filter(Boolean);
        this.plugin.settings.excludeFolders = lines;
        await this.plugin.saveSettings();
        const cursorPos = input.selectionStart || 0;
        const before = input.value.substring(0, cursorPos);
        const parts = before.split("\n");
        const current = parts[parts.length - 1];
        let suggestions = [];
        const files = this.app.vault.getMarkdownFiles();
        if (!current.includes("/")) {
          const set = /* @__PURE__ */ new Set();
          files.forEach((f) => {
            const p = f.path.split("/")[0];
            if (f.path.includes("/")) set.add(p);
          });
          suggestions = Array.from(set);
        } else {
          const base = current.endsWith("/") ? current : current + "/";
          const set = /* @__PURE__ */ new Set();
          files.forEach((f) => {
            if (f.path.startsWith(base)) {
              const rem = f.path.substring(base.length);
              const slash = rem.indexOf("/");
              if (slash !== -1) {
                const next = rem.substring(0, slash);
                set.add(base + next);
              }
            }
          });
          suggestions = Array.from(set);
        }
        const q = current.toLowerCase();
        suggestions = suggestions.filter((s) => s.toLowerCase().includes(q)).sort((a, b) => a.localeCompare(b)).slice(0, 50);
        while (suggestEl.firstChild) {
          suggestEl.removeChild(suggestEl.firstChild);
        }
        suggestions.forEach((sug) => {
          const item = suggestEl.createDiv({ cls: "quicklink-suggestion-item", text: sug });
          item.addEventListener("mousedown", async (e) => {
            e.preventDefault();
            const all = input.value.split("\n");
            all[parts.length - 1] = sug;
            input.value = all.join("\n");
            this.plugin.settings.excludeFolders = all.filter((s) => s.trim());
            await this.plugin.saveSettings();
            while (suggestEl.firstChild) {
              suggestEl.removeChild(suggestEl.firstChild);
            }
          });
          suggestEl.addEventListener("mouseleave", () => {
            while (suggestEl.firstChild) {
              suggestEl.removeChild(suggestEl.firstChild);
            }
          });
        });
      };
      input.addEventListener("input", updateSuggestions);
      input.addEventListener("focus", updateSuggestions);
      input.addEventListener("blur", () => {
        while (suggestEl.firstChild) {
          suggestEl.removeChild(suggestEl.firstChild);
        }
      });
    });
    new import_obsidian.Setting(containerEl).setName("Enable Advanced URI Integration / \u542F\u7528\u9AD8\u7EA7 URI \u96C6\u6210").setDesc("If installed, new links will use Advanced URI format / \u5982\u679C\u5B89\u88C5\u4E86\u6B64\u63D2\u4EF6\uFF0C\u751F\u6210\u9AD8\u7EA7 URI \u683C\u5F0F\u7684\u94FE\u63A5").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableAdvancedUri).onChange(async (value) => {
        this.plugin.settings.enableAdvancedUri = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("UID Field Name / UID \u5B57\u6BB5\u540D").setDesc("Frontmatter field name for UID used in Advanced URI / \u7528\u4E8E Advanced URI \u7684\u524D\u7F6E\u5B57\u6BB5\u540D").addText(
      (text) => text.setPlaceholder("uid").setValue(this.plugin.settings.advancedUriField).onChange(async (value) => {
        this.plugin.settings.advancedUriField = value.trim();
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h3", { text: "Custom Rules / \u81EA\u5B9A\u4E49\u89C4\u5219" });
    this.plugin.settings.triggerFilterRules.forEach((rule, index) => {
      const details = containerEl.createEl("details");
      details.addClass("quicklink-rule-panel");
      const summary = details.createEl("summary", {
        text: `Rule ${index + 1}: [${rule.prefix || "<\u672A\u8BBE\u7F6E>"}] - ${rule.name || "<\u672A\u547D\u540D>"}`
      });
      summary.addClass("quicklink-rule-summary");
      const ruleContainer = details.createDiv();
      new import_obsidian.Setting(ruleContainer).setName("Prefix / \u524D\u7F00").setDesc("\u89E6\u53D1\u89C4\u5219\u524D\u7F00\u5B57\u7B26").addText(
        (text) => text.setValue(rule.prefix).onChange((value) => {
          rule.prefix = value;
        })
      ).addExtraButton(
        (btn) => btn.setIcon("trash").setTooltip("Delete / \u5220\u9664").onClick(async () => {
          this.plugin.settings.triggerFilterRules.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        })
      );
      new import_obsidian.Setting(ruleContainer).setName("Name / \u540D\u79F0").setDesc("\u89C4\u5219\u663E\u793A\u540D\u79F0").addText(
        (text) => text.setValue(rule.name).onChange((value) => {
          rule.name = value;
        })
      );
      new import_obsidian.Setting(ruleContainer).setName("Include Folders / \u5305\u542B\u6587\u4EF6\u5939").setDesc("\u4EC5\u5728\u8FD9\u4E9B\u6587\u4EF6\u5939\u4E2D\u641C\u7D22\uFF08\u6BCF\u884C\u4E00\u4E2A\uFF09").addTextArea((text) => {
        const input = text.inputEl;
        const wrapper = input.parentElement;
        wrapper.addClass("quicklink-wrapper");
        const suggestEl = wrapper.createDiv();
        suggestEl.addClass("quicklink-inline-suggestions");
        const updateSuggestions = async () => {
          const lines = input.value.split("\n").map((s) => s.trim()).filter(Boolean);
          rule.includeFolders = lines;
          await this.plugin.saveSettings();
          const cursorPos = input.selectionStart || 0;
          const before = input.value.substring(0, cursorPos);
          const parts = before.split("\n");
          const current = parts[parts.length - 1];
          let suggestions = [];
          const files = this.app.vault.getMarkdownFiles();
          if (!current.includes("/")) {
            const set = /* @__PURE__ */ new Set();
            files.forEach((f) => {
              const p = f.path.split("/")[0];
              if (f.path.includes("/")) set.add(p);
            });
            suggestions = Array.from(set);
          } else {
            const base = current.endsWith("/") ? current : current + "/";
            const set = /* @__PURE__ */ new Set();
            files.forEach((f) => {
              if (f.path.startsWith(base)) {
                const rem = f.path.substring(base.length);
                const slash = rem.indexOf("/");
                if (slash !== -1) {
                  const next = rem.substring(0, slash);
                  set.add(base + next);
                }
              }
            });
            suggestions = Array.from(set);
          }
          const q = current.toLowerCase();
          suggestions = suggestions.filter((s) => s.toLowerCase().includes(q)).sort((a, b) => a.localeCompare(b)).slice(0, 50);
          while (suggestEl.firstChild) {
            suggestEl.removeChild(suggestEl.firstChild);
          }
          suggestions.forEach((sug) => {
            const item = suggestEl.createDiv({ cls: "quicklink-suggestion-item", text: sug });
            item.addEventListener("mousedown", async (e) => {
              e.preventDefault();
              const all = input.value.split("\n");
              all[parts.length - 1] = sug;
              input.value = all.join("\n");
              rule.includeFolders = all.filter((s) => s.trim());
              await this.plugin.saveSettings();
              while (suggestEl.firstChild) {
                suggestEl.removeChild(suggestEl.firstChild);
              }
            });
            suggestEl.addEventListener("mouseleave", () => {
              while (suggestEl.firstChild) {
                suggestEl.removeChild(suggestEl.firstChild);
              }
            });
          });
        };
        input.addEventListener("input", updateSuggestions);
        input.addEventListener("focus", updateSuggestions);
        input.addEventListener("blur", () => {
          while (suggestEl.firstChild) {
            suggestEl.removeChild(suggestEl.firstChild);
          }
        });
      });
      new import_obsidian.Setting(ruleContainer).setName("Name Filter Regex / \u6587\u4EF6\u540D\u6B63\u5219").setDesc("\u4EC5\u5339\u914D\u7B26\u5408\u6B64\u6B63\u5219\u7684\u6587\u4EF6\u540D").addText(
        (text) => text.setValue(rule.nameFilterRegex).onChange((value) => {
          rule.nameFilterRegex = value;
        })
      );
      new import_obsidian.Setting(ruleContainer).setName("Include Tags / \u5305\u542B\u6807\u7B7E").setDesc("\u4EC5\u5728\u5305\u542B\u8FD9\u4E9B\u6807\u7B7E\u7684\u6587\u4EF6\u4E2D\u641C\u7D22\uFF08\u6BCF\u884C\u4E00\u4E2A\uFF09").addTextArea((text) => {
        const input = text.inputEl;
        const wrapper = input.parentElement;
        wrapper.addClass("quicklink-wrapper");
        const suggestEl = wrapper.createDiv();
        suggestEl.addClass("quicklink-inline-suggestions");
        const allTags = Array.from(
          new Set(
            this.app.vault.getMarkdownFiles().flatMap((f) => {
              var _a;
              const cache = this.app.metadataCache.getFileCache(f);
              return ((_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.map((t) => t.tag.startsWith("#") ? t.tag.substring(1) : t.tag)) || [];
            })
          )
        );
        const updateSuggestions = async () => {
          const lines = input.value.split("\n").map((s) => s.trim()).filter(Boolean);
          rule.includeTags = lines;
          await this.plugin.saveSettings();
          const cursorPos = input.selectionStart || 0;
          const before = input.value.substring(0, cursorPos);
          const parts = before.split("\n");
          const current = parts[parts.length - 1].toLowerCase();
          const suggestions = allTags.filter((tag) => tag.toLowerCase().includes(current)).sort((a, b) => a.localeCompare(b)).slice(0, 50);
          while (suggestEl.firstChild) {
            suggestEl.removeChild(suggestEl.firstChild);
          }
          suggestions.forEach((tag) => {
            const item = suggestEl.createDiv({ cls: "quicklink-suggestion-item", text: tag });
            item.addEventListener("mousedown", async (e) => {
              e.preventDefault();
              const allLines = input.value.split("\n");
              allLines[parts.length - 1] = tag;
              input.value = allLines.join("\n");
              rule.includeTags = allLines.filter((s) => s.trim());
              await this.plugin.saveSettings();
              while (suggestEl.firstChild) {
                suggestEl.removeChild(suggestEl.firstChild);
              }
            });
          });
        };
        input.addEventListener("input", updateSuggestions);
        input.addEventListener("focus", updateSuggestions);
        input.addEventListener("blur", () => {
          while (suggestEl.firstChild) {
            suggestEl.removeChild(suggestEl.firstChild);
          }
        });
      });
      new import_obsidian.Setting(ruleContainer).addButton(
        (btn) => btn.setButtonText("Save Rule / \u4FDD\u5B58\u89C4\u5219").setCta().onClick(async () => {
          await this.plugin.saveSettings();
          new import_obsidian.Notice(`Saved rule ${rule.prefix || "(no prefix)"}`);
        })
      );
    });
    new import_obsidian.Setting(containerEl).addButton(
      (button) => button.setButtonText("Add Rule / \u6DFB\u52A0\u89C4\u5219").onClick(async () => {
        this.plugin.settings.triggerFilterRules.push({
          prefix: "",
          name: "",
          includeFolders: [],
          nameFilterRegex: "",
          includeTags: []
        });
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
};
var FileSuggest = class extends import_obsidian.EditorSuggest {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
    console.log("QuickLink: FileSuggest initialized");
  }
  getSuggestions(context) {
    var _a;
    const rawQuery = context.query;
    const fullQuery = rawQuery.trimStart();
    const globalTrigger = this.plugin.settings.autocompleteTriggerPhrase;
    console.log(`QuickLink getSuggestions: fullQuery='${fullQuery}', rules=${JSON.stringify(this.plugin.settings.triggerFilterRules)}`);
    let files = this.app.vault.getMarkdownFiles().filter((f) => !this.plugin.settings.excludeFolders.some((folder) => f.path.startsWith(folder + "/")));
    const rule = this.plugin.settings.triggerFilterRules.find((r) => r.prefix.length > 0 && fullQuery.startsWith(r.prefix));
    console.log(`QuickLink matched rule: ${rule ? rule.prefix : "none"}`);
    const actualQuery = rule ? fullQuery.slice(rule.prefix.length).trim() : fullQuery.slice(globalTrigger.length).trim();
    if (rule) {
      if (rule.includeFolders.length) {
        files = files.filter((f) => rule.includeFolders.some((folder) => f.path.startsWith(folder + "/")));
      }
      if (rule.nameFilterRegex) {
        const regex = new RegExp(rule.nameFilterRegex);
        files = files.filter((f) => regex.test(f.basename));
      }
      if (rule.includeTags && rule.includeTags.length) {
        files = files.filter((f) => {
          const cache = this.app.metadataCache.getFileCache(f);
          if (!(cache == null ? void 0 : cache.tags)) return false;
          return cache.tags.some((t) => {
            const tagName = t.tag.startsWith("#") ? t.tag.substring(1) : t.tag;
            return rule.includeTags.includes(tagName);
          });
        });
      }
    }
    if (!rule && ((_a = this.plugin.settings.mainPaths) == null ? void 0 : _a.length)) {
      files = files.filter(
        (f) => this.plugin.settings.mainPaths.some((p) => f.path.startsWith(p + "/"))
      );
    }
    if (actualQuery) {
      const q = actualQuery.toLowerCase();
      files = files.filter((f) => f.basename.toLowerCase().includes(q) || f.path.toLowerCase().includes(q));
    }
    return files.slice(0, 50).map((f) => ({ label: f.basename, file: f, path: f.path }));
  }
  renderSuggestion(sug, el) {
    el.setText(sug.label);
    const parts = sug.path.split("/");
    parts.pop();
    el.createSpan({ cls: "suggestion-note", text: ` (${parts.join("/")})` });
  }
  async selectSuggestion(sug, evt) {
    if (!this.context) return;
    const { editor, start, end } = this.context;
    const alias = evt.shiftKey ? this.context.query : void 0;
    const link = await generateMarkdownLink(this.app, sug.file, alias, this.plugin);
    editor.replaceRange(link, start, end);
  }
  onTrigger(cursor, editor, file) {
    if (!this.plugin.settings.isAutosuggestEnabled) return null;
    const position = editor.getCursor();
    const line = editor.getLine(position.line);
    let idx = -1;
    let usedTrigger = "";
    for (const rule of this.plugin.settings.triggerFilterRules) {
      if (rule.prefix.length > 0) {
        const i = line.lastIndexOf(rule.prefix, position.ch - rule.prefix.length);
        if (i !== -1) {
          idx = i;
          usedTrigger = rule.prefix;
          break;
        }
      }
    }
    if (idx === -1) {
      const trigger = this.plugin.settings.autocompleteTriggerPhrase;
      const i = line.lastIndexOf(trigger, position.ch - trigger.length);
      if (i !== -1) {
        idx = i;
        usedTrigger = trigger;
      }
    }
    if (idx === -1) return null;
    const start = { line: position.line, ch: idx };
    const end = position;
    const query = line.substring(idx, position.ch);
    console.log(`QuickLink onTrigger: detected query='${query}', usedTrigger='${usedTrigger}'`);
    return { editor, file, start, end, query };
  }
};
var QuickLinkPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingsTab(this.app, this));
    this.suggest = new FileSuggest(this.app, this);
    this.registerEditorSuggest(this.suggest);
    this.addRibbonIcon("link-2", "Auto Link Scan / \u81EA\u52A8\u626B\u63CF", () => {
      this.runAutoScan();
    });
  }
  onunload() {
  }
  /** 自动扫描当前文档，链接主体文件夹下匹配的文件名 */
  async runAutoScan() {
    var _a;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!view || !view.file) {
      new import_obsidian.Notice("\u8BF7\u5728 Markdown \u89C6\u56FE\u4E2D\u4F7F\u7528\u6B64\u529F\u80FD");
      return;
    }
    const file = view.file;
    const content = await this.app.vault.read(file);
    let targets = this.app.vault.getMarkdownFiles();
    if ((_a = this.settings.mainPaths) == null ? void 0 : _a.length) {
      targets = targets.filter(
        (f) => this.settings.mainPaths.some((p) => f.path.startsWith(p + "/"))
      );
    }
    console.log("QuickLink runAutoScan: target files:", targets.map((f) => f.path));
    let newContent = content;
    let totalCount = 0;
    for (const tf of targets) {
      console.log(`QuickLink runAutoScan: scanning file basename='${tf.basename}' path='${tf.path}'`);
      const name = tf.basename;
      const pattern = `(^|\\W)${escapeRegExp(name)}(?=\\W|$)`;
      const regex = new RegExp(pattern, "g");
      const matches = newContent.match(regex);
      if (matches && matches.length > 0) {
        console.log(`QuickLink runAutoScan: found ${matches.length} matches for '${name}'`);
        totalCount += matches.length;
        const linkText = await generateMarkdownLink(this.app, tf, void 0, this);
        console.log(`QuickLink runAutoScan: linkText='${linkText}'`);
        newContent = newContent.replace(regex, (_match, p1) => `${p1}${linkText}`);
      }
    }
    console.log(`QuickLink runAutoScan: total replacements to apply: ${totalCount}`);
    await this.app.vault.modify(file, newContent);
    new import_obsidian.Notice(`\u81EA\u52A8\u626B\u63CF\u5B8C\u6210\uFF0C\u5DF2\u94FE\u63A5 ${totalCount} \u5904`);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
